description: Resize an EC2 instance
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  InstanceId:
    type: String
    description: (Required) The Id of the instance
  InstanceType:
    type: String
    description: (Required) The desired instance type
  SleepWait:
    type: String
    default: PT5S
    description: (Optional) The desired wait time before starting instance
    allowedPattern: ^PT([0-9]{1,6}S|[0-9]{1,5}M|[0-9]{1,3}H)$|^PD[0-7]$
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
variables:
  CurrentInstanceType:
    type: String
    description: The current instance type associated with the instance
  LoopVariable:
    type: Integer
    description: Variable to demo loops
    default: 1
mainSteps:
  - name: RunScript
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |
        import boto3

        def script_handler(events, context):
            instance_id = events["InstanceId"]
            instance_type = events["InstanceType"]

            ec2client = boto3.client('ec2')
            
            #stop the instance
            ec2client.stop_instances(InstanceIds=[instance_id])
            waiter = ec2client.get_waiter('instance_stopped')
            waiter.wait(InstanceIds=[instance_id])

            # change the instance type
            ec2client.modify_instance_attribute(InstanceId=instance_id, Attribute='instanceType', Value=instance_type)

            ec2client.start_instances(InstanceIds=[instance_id])
            waiter = ec2client.get_waiter('instance_running')
            waiter.wait(InstanceIds=[instance_id])

            return {
                'Output' : instance_id
            }
      InputPayload:
        InstanceId: '{{InstanceId}}'
        InstanceType: '{{InstanceType}}'
